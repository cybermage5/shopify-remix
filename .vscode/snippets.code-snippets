{
  "Arrow Function Component": {
    "prefix": "sfc",
    "body": [
      "const $1 = ($2) => {",
      " return ( $0 );",
      "}",
      " ",
      "export default $1;",
    ],
    "description": "Arrow Function Component",
  },

  "Polaris Page with Loader": {
    "prefix": "createNewPage",
    "body": [
      "import verifyRequest from \"@/app/.server/middlewares/verifyRequest\";",
      "import { useNavigate, json } from \"@remix-run/react\";",
      "import {",
      "  BlockStack,",
      "  InlineStack,",
      "  Button,",
      "  Card,",
      "  Layout,",
      "  Page,",
      "  Text,",
      "} from \"@shopify/polaris\";",
      "",
      "/**",
      " * @param {import(\"@remix-run/node\").LoaderFunctionArgs} args - The loader function arguments.",
      " * @returns {Promise<Response>} A promise that resolves to a Response object.",
      " * @throws {Response} Throws a Response for unhandled webhook topics or when processing is complete.",
      " */",
      "export const loader = async ({ request }) => {",
      "  const { session, shop } = await verifyRequest(request);",
      "  return json({ message: \"ok\" });",
      "};",
      "",
      "const $1 = () => {",
      "",
      "    const nav = useNavigate();",
      "  return (",
      "    <>",
      "      <Page",
      "        title=\"Page Title\"",
      "        backAction={{",
      "          onAction: () => {",
      "            nav(\"/\");",
      "          },",
      "        }}",
      "      >",
      "        <Layout>",
      "          <Layout.Section>",
      "            <Card>",
      "              <BlockStack gap=\"200\">",
      "                <Text variant=\"headingMd\">Heading</Text>",
      "                <Text>Regular Text Content</Text>",
      "                <InlineStack align=\"end\">",
      "                  <Button",
      "                    variant=\"primary\"",
      "                    onClick={() => {",
      "                      alert('Button pressed');",
      "                    }}",
      "                  >",
      "                    Button",
      "                  </Button>",
      "                </InlineStack>",
      "              </BlockStack>",
      "            </Card>",
      "          </Layout.Section>",
      "        </Layout>",
      "      </Page>",
      "    </>",
      "  );",
      "};",
      "",
      "export default $1;",
    ],
    "description": "Polaris Page with Loader",
  },

  "Remix Loder": {
    "prefix": "createloader",
    "body": [
      "import verifyRequest from \"@/app/.server/middlewares/verifyRequest\";",
      "import { json } from \"@remix-run/react\";",
      "",
      "/**",
      " * @param {import(\"@remix-run/node\").LoaderFunctionArgs} args - The loader function arguments.",
      " * @returns {Promise<Response>} A promise that resolves to a Response object.",
      " * @throws {Response} Throws a Response for unhandled webhook topics or when processing is complete.",
      " */",
      "export const loader = async ({ request }) => {",
      "  const { session, shop } = await verifyRequest(request);",
      "  return json({ message: \"ok\" });",
      "};",
    ],
    "description": "Remix Loder",
  },

  "app_proxy/ route with middleware": {
    "prefix": "createproxy",
    "body": [
      "import verifyProxy from \"@/app/.server/middlewares/verifyProxy\";",
      "import { json } from \"@remix-run/react\";",
      "",
      "/**",
      " * @param {import(\"@remix-run/node\").LoaderFunctionArgs} args - The loader function arguments.",
      " * @returns {Promise<Response>} A promise that resolves to a Response object.",
      " * @throws {Response} Throws a Response for unhandled webhook topics or when processing is complete.",
      " */",
      "export const loader = async ({ request }) => {",
      "  const { shop } = await verifyProxy(request);",
      "  return json({ message: \"ok\" });",
      "};",
      "",
    ],
    "description": "app_proxy/ route with middleware",
  },

  "Webhook function": {
    "prefix": "createwebhook",
    "body": [
      "/**",
      "* Replace TOPIC_NAME with a Webhook Topic to enable autocomplete",
      "* @typedef { import(\"@/_developer/types/2023-10/webhooks.js\").${2:TOPIC_NAME} } webhookTopic",
      "*/",
      "",
      "const $1 = async (topic, shop, webhookRequestBody, webhookId, apiVersion) => {",
      " try {",
      "  /** @type {webhookTopic} */",
      "  const webhookBody = JSON.parse(webhookRequestBody);",
      "  $3",
      " } catch (e) {",
      "  console.error(e);",
      " }",
      "};",
      "",
      "export default $1;",
    ],
    "description": "Webhook function",
  },

  "GraphQL Client Provider": {
    "prefix": "createOnlineClientGql",
    "body": [
      "// import clientProvider from \"@/utils/clientProvider\";",
      "",
      "  const { client } = await clientProvider.online.graphqlClient({",
      "   req,",
      "   res,",
      "  });",
      "",
      "  const response = await client.request(",
      "   `{}`, //Paste your GraphQL query/mutation here",
      "  );",
    ],
    "description": "GraphQL Client Provider",
  },

  "Offline GraphQL Client Provider": {
    "prefix": "createOfflineClientGql",
    "body": [
      "// import clientProvider from \"@/utils/clientProvider\";",
      "",
      "  const { client } = await clientProvider.online.graphqlClient({",
      "   shop: req.user_shop,",
      "  });",
      "",
      "  const response = await client.request(",
      "   `{}`, //Paste your GraphQL query/mutation here",
      "  );",
    ],
    "description": "Offline GraphQL Client Provider",
  },

  "Create POST Request": {
    "prefix": "createPost",
    "body": [
      "const response = await (await fetch(\"/api/apps\",",
      "{",
      "  headers: {",
      "Accept: \"application/json\",",
      "\"Content-Type\": \"application/json\",",
      "  },",
      "  method: \"POST\",",
      "  body: JSON.stringify(),",
      "})).json();",
    ],
  },

  "Create GET Request": {
    "prefix": "createGet",
    "body": ["const response = await (await fetch(\"/api/apps\")).json()"],
  },
}
